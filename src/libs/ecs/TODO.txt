+ Tags should not allocate memory!
+ Put enttity in empty archetype
+ Make api to create with builder.
+ Caching
+ Move instead copy
+ Chunk size in kb
+ Implement Query.
+ Rework systems.
+ Appear / dissapear
+ Check world match
+ ImplementTypeInfo iterator
+ implement Query iterator
+ implement Event query
+ deffered events
+ event for entity
+ implement query context
+ query by entity.
+ todo refactor systems/queries to entitites.
+ rework chunk system
+ Optional components
+ Refactor all queries
+ assert for chunk count and chunk entity sizes
+ rework Events Api
+ more Events tests
+ more tests of edit update on deleted
+ Command buffer
+ deffered commands.
+ deffered delete
+ deffered tests
+ uint32_t everything
+ systems ordering
+ log err while systems not ordered.
+ Benchmarks
+ replace Ska?
+ more checks for apper dissapear
+ thread safity checks
+ reorder functions in world

Todo track:
+ Allocate additional memory
+ Initilizate on Appear
+ Implement process tracked
+ Implement track api
+ Send events
+ Optimize tracking
# Made a tests for tracking

Absolutely necessary:
+ Order tokens
# throw errors to make a tests
# check all args present in required components.
# check required and exluded do not overlap
+ Track
# singletons
# checks for copy/move only
# Protection of updating same archetype in subqueries. (borrow checker) (Ask GPT how other do that?)
# do not allow add world entityid or event as components.
+ Refactor how interation works. Pass iterators and interate over them. Remove ForEntity use unified iterators instead.

Nice to have:
* Caching of components index in queries and systems

???:
+ refactor includes
# delete systems / queries

Probably:
* parents
* rework queries/view (uncached queries?)
* world view?
* Add names for entitites
* Parrallel execution
* Declare all subqueries in system declaration (to have 100% nice graph of dependecies)
* Dirty masks for colums
